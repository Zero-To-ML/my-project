MEMBER DASHBOARD (library_app.py lines 200-250)

def create_member_dashboard(self):
    self.dashboard_frame = ctk.CTkFrame(self.main_frame)
    self.dashboard_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
    
    # Title
    title_label = ctk.CTkLabel(self.dashboard_frame, text="Member Dashboard", 
                              font=ctk.CTkFont(size=20, weight="bold"))
    title_label.grid(row=0, column=0, columnspan=2, pady=20)
    
    # Buttons for different operations
    buttons = [
        ("Search Books", self.search_books),
        ("View Issued Books", self.view_issued_books),
        ("Add Review", self.add_review),
        ("View Fines", self.view_fines),
        ("Logout", self.logout)
    ]
    
    for i, (text, command) in enumerate(buttons):
        btn = ctk.CTkButton(self.dashboard_frame, text=text, command=command)
        btn.grid(row=i+1, column=0, padx=10, pady=10, sticky="ew")

VIEW ISSUED BOOKS (library_app.py lines 800-850)

def view_issued_books(self):
    # Create a new window for viewing issued books
    view_window = ctk.CTkToplevel(self.window)
    view_window.title("View Issued Books")
    view_window.geometry("800x400")
    
    # Create treeview
    tree = ttk.Treeview(view_window, columns=("Issue ID", "Book Title", "Issue Date", "Due Date", "Return Date"))
    tree.heading("#0", text="")
    tree.heading("Issue ID", text="Issue ID")
    tree.heading("Book Title", text="Book Title")
    tree.heading("Issue Date", text="Issue Date")
    tree.heading("Due Date", text="Due Date")
    tree.heading("Return Date", text="Return Date")
    
    # Get issued books
    query = """
    SELECT i.issueid, b.title, i.issued_date, i.due_date, i.return_date 
    FROM ISSUED_BOOKS i 
    JOIN BOOKS b ON i.isbn = b.isbn 
    WHERE i.memberid = :1
    """
    cursor = self.db.execute_query(query, (self.current_user,))
    issued_books = cursor.fetchall()
    
    for book in issued_books:
        tree.insert("", "end", values=book)
    
    tree.pack(expand=True, fill="both", padx=10, pady=10)

ADD REVIEW (library_app.py lines 850-900)

def add_review(self):
    # Create a new window for adding a review
    review_window = ctk.CTkToplevel(self.window)
    review_window.title("Add Review")
    review_window.geometry("400x300")
    
    # Get books
    query = "SELECT isbn, title FROM BOOKS ORDER BY title"
    cursor = self.db.execute_query(query)
    books = cursor.fetchall()
    
    if not books:
        messagebox.showerror("Error", "No books available for review")
        review_window.destroy()
        return
    
    ctk.CTkLabel(review_window, text="Select Book:").grid(row=0, column=0, padx=10, pady=5)
    book_var = ctk.StringVar()
    book_dropdown = ctk.CTkOptionMenu(review_window, values=[f"{book[0]} - {book[1]}" for book in books], variable=book_var)
    book_dropdown.grid(row=0, column=1, padx=10, pady=5)
    
    ctk.CTkLabel(review_window, text="Rating (1-5):").grid(row=1, column=0, padx=10, pady=5)
    rating_var = ctk.StringVar(value="5")
    rating_dropdown = ctk.CTkOptionMenu(review_window, values=["1", "2", "3", "4", "5"], variable=rating_var)
    rating_dropdown.grid(row=1, column=1, padx=10, pady=5)
    
    ctk.CTkLabel(review_window, text="Review Text:").grid(row=2, column=0, padx=10, pady=5)
    review_text = ctk.CTkTextbox(review_window, height=100)
    review_text.grid(row=2, column=1, padx=10, pady=5)
    
    def submit():
        try:
            if not book_var.get():
                raise Exception("Please select a book")
            
            isbn = book_var.get().split(" - ")[0]
            rating = int(rating_var.get())
            review = review_text.get("1.0", "end-1c").strip()
            
            if not review:
                raise Exception("Please enter a review text")
            
            # Generate a unique review ID
            review_id = f"REV{int(datetime.now().timestamp())}"
            
            query = """
            INSERT INTO REVIEWS (reviewid, memberid, isbn, rating, reviewtxt, reviewdate)
            VALUES (:1, :2, :3, :4, :5, SYSDATE)
            """
            self.db.execute_query(query, (review_id, self.current_user, isbn, rating, review))
            messagebox.showinfo("Success", "Review added successfully!")
            review_window.destroy()
            self.refresh_database()
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to add review: {str(e)}")
    
    submit_button = ctk.CTkButton(review_window, text="Submit Review", command=submit)
    submit_button.grid(row=3, column=0, columnspan=2, pady=20) 