MAIN UI SETUP (library_app.py lines 60-100)

def setup_ui(self):
    # Configure window
    self.window = ctk.CTk()
    self.window.title("Library Management System")
    self.window.geometry("1000x600")
    
    # Configure grid
    self.window.grid_columnconfigure(0, weight=1)
    self.window.grid_rowconfigure(0, weight=1)
    
    # Create main frame
    self.main_frame = ctk.CTkFrame(self.window)
    self.main_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
    
    # Create login frame
    self.create_login_frame()

LOGIN FRAME (library_app.py lines 100-150)

def create_login_frame(self):
    self.login_frame = ctk.CTkFrame(self.main_frame)
    self.login_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
    
    # Title
    title_label = ctk.CTkLabel(self.login_frame, text="Library Management System", 
                              font=ctk.CTkFont(size=20, weight="bold"))
    title_label.grid(row=0, column=0, columnspan=2, pady=20)
    
    # User type selection
    self.user_type = ctk.CTkOptionMenu(self.login_frame, values=["Librarian", "Member"])
    self.user_type.grid(row=1, column=0, columnspan=2, pady=10)
    
    # Username entry
    username_label = ctk.CTkLabel(self.login_frame, text="Username:")
    username_label.grid(row=2, column=0, padx=10, pady=10)
    self.username_entry = ctk.CTkEntry(self.login_frame)
    self.username_entry.grid(row=2, column=1, padx=10, pady=10)
    
    # Password entry
    password_label = ctk.CTkLabel(self.login_frame, text="Password:")
    password_label.grid(row=3, column=0, padx=10, pady=10)
    self.password_entry = ctk.CTkEntry(self.login_frame, show="*")
    self.password_entry.grid(row=3, column=1, padx=10, pady=10)
    
    # Login button
    login_button = ctk.CTkButton(self.login_frame, text="Login", command=self.login)
    login_button.grid(row=4, column=0, columnspan=2, pady=20)

VIEW BOOKS UI (library_app.py lines 500-550)

def view_books(self):
    # Create a new window for viewing books
    self.view_books_window = ctk.CTkToplevel(self.window)
    self.view_books_window.title("View Books")
    self.view_books_window.geometry("800x400")
    
    # Create treeview
    tree = ttk.Treeview(self.view_books_window, columns=("ISBN", "Title", "Author", "Genre", "Price", "Status"))
    tree.heading("#0", text="")
    tree.heading("ISBN", text="ISBN")
    tree.heading("Title", text="Title")
    tree.heading("Author", text="Author")
    tree.heading("Genre", text="Genre")
    tree.heading("Price", text="Price")
    tree.heading("Status", text="Status")
    
    # Set column widths
    tree.column("#0", width=0, stretch=False)
    tree.column("ISBN", width=150)
    tree.column("Title", width=200)
    tree.column("Author", width=150)
    tree.column("Genre", width=100)
    tree.column("Price", width=100)
    tree.column("Status", width=100)
    
    # Get books
    query = "SELECT isbn, title, author, genre, price, status FROM BOOKS ORDER BY title"
    cursor = self.db.execute_query(query)
    books = cursor.fetchall()
    
    for book in books:
        tree.insert("", "end", values=book)
    
    tree.pack(expand=True, fill="both", padx=10, pady=10)
    
    # Add refresh button
    refresh_button = ctk.CTkButton(self.view_books_window, text="Refresh", 
                                 command=lambda: self.refresh_view_books(tree))
    refresh_button.pack(pady=10)

VIEW MEMBERS UI (library_app.py lines 550-600)

def view_members(self):
    # Create a new window for viewing members
    self.view_members_window = ctk.CTkToplevel(self.window)
    self.view_members_window.title("View Members")
    self.view_members_window.geometry("600x400")
    
    # Create treeview
    tree = ttk.Treeview(self.view_members_window, columns=("Member ID", "Name", "Phone"))
    tree.heading("#0", text="")
    tree.heading("Member ID", text="Member ID")
    tree.heading("Name", text="Name")
    tree.heading("Phone", text="Phone")
    
    # Set column widths
    tree.column("#0", width=0, stretch=False)
    tree.column("Member ID", width=150)
    tree.column("Name", width=200)
    tree.column("Phone", width=150)
    
    # Get members
    query = "SELECT memberid, name, phoneno FROM MEMBER ORDER BY name"
    cursor = self.db.execute_query(query)
    members = cursor.fetchall()
    
    for member in members:
        tree.insert("", "end", values=member)
    
    tree.pack(expand=True, fill="both", padx=10, pady=10)
    
    # Add refresh button
    refresh_button = ctk.CTkButton(self.view_members_window, text="Refresh", 
                                 command=lambda: self.refresh_view_members(tree))
    refresh_button.pack(pady=10) 