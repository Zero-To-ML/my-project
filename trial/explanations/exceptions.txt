EXCEPTION HANDLING CODE (library_app.py lines 1-20)

import logging
import os
import sys
import random
import string

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

EXCEPTION HANDLING IN DATABASE CONNECTION (library_app.py lines 30-60)

class DatabaseConnection:
    def __init__(self):
        self.connection = None
        self.cursor = None
        logger.info("DatabaseConnection initialized")
        
    def connect(self, username, password):
        try:
            if self.connection:
                self.connection.close()
            
            self.connection = oracledb.connect(
                user="system",
                password="123RA*ra",
                dsn="localhost:1521/XE"
            )
            self.cursor = self.connection.cursor()
            logger.info("Successfully connected to Oracle Database")
            return True
        except Exception as e:
            logger.error(f"Failed to connect to database: {str(e)}")
            return False
            
    def execute_query(self, query, params=None):
        try:
            logger.debug(f"Executing query: {query}")
            if params:
                logger.debug(f"With parameters: {params}")
            
            cursor = self.connection.cursor()
            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)
            
            if not query.strip().upper().startswith("SELECT"):
                self.connection.commit()
            
            return cursor
        except Exception as e:
            logger.error(f"Error executing query: {str(e)}")
            self.connection.rollback()
            raise e

EXCEPTION HANDLING IN SEARCH FUNCTION (library_app.py lines 600-650)

def search():
    try:
        # Clear existing items
        for item in tree.get_children():
            tree.delete(item)
        
        # Get search parameters
        search_type_value = search_type.get()
        search_value_text = search_value.get() if search_type.get() != "All Books" else None
        
        # Build the SQL query based on search type
        base_query = """
        SELECT 
            b.isbn,
            b.title,
            b.author,
            b.genre,
            b.price,
            b.status,
            ROUND(AVG(r.rating), 2) as avg_rating,
            COUNT(r.reviewid) as total_reviews
        FROM BOOKS b
        LEFT JOIN REVIEWS r ON b.isbn = r.isbn
        """
        
        where_clause = ""
        params = []
        
        if search_type_value != "All Books":
            if search_type_value == "Title":
                where_clause = "WHERE UPPER(b.title) LIKE UPPER(:1)"
                params.append(f"%{search_value_text}%")
            elif search_type_value == "Author":
                where_clause = "WHERE UPPER(b.author) LIKE UPPER(:1)"
                params.append(f"%{search_value_text}%")
            elif search_type_value == "Genre":
                where_clause = "WHERE UPPER(b.genre) LIKE UPPER(:1)"
                params.append(f"%{search_value_text}%")
            elif search_type_value == "ISBN":
                where_clause = "WHERE b.isbn = :1"
                params.append(search_value_text)
            elif search_type_value == "Price (Less than)":
                where_clause = "WHERE b.price <= :1"
                params.append(float(search_value_text))
            elif search_type_value == "Price (More than)":
                where_clause = "WHERE b.price >= :1"
                params.append(float(search_value_text))
            elif search_type_value == "Status":
                where_clause = "WHERE UPPER(b.status) = UPPER(:1)"
                params.append(search_value_text)
        
        query = base_query + where_clause + " GROUP BY b.isbn, b.title, b.author, b.genre, b.price, b.status ORDER BY b.title"
        
        # Execute the query
        cursor = self.db.execute_query(query, params)
        
        # Fetch and display results
        while True:
            row = cursor.fetchone()
            if not row:
                break
            
            # Format the data
            formatted_row = (
                row[0],  # isbn
                row[1],  # title
                row[2],  # author
                row[3],  # genre
                f"${row[4]:.2f}",  # price
                row[5],  # status
                f"{row[6]:.1f}" if row[6] else "N/A",  # avg_rating
                str(row[7]) if row[7] else "0"  # total_reviews
            )
            
            tree.insert("", "end", values=formatted_row)
        
        if not tree.get_children():
            messagebox.showinfo("Search Results", "No books found matching your criteria.")
            
    except Exception as e:
        logger.error(f"Search error: {str(e)}")
        messagebox.showerror("Search Error", str(e)) 